diff --git a/.gitignore b/.gitignore
index 549e00a..8d008aa 100644
--- a/.gitignore
+++ b/.gitignore
@@ -31,3 +31,6 @@ build/
 
 ### VS Code ###
 .vscode/
+
+diff.txt
+full_code_dump.txt
diff --git a/diff.txt b/diff.txt
index fc60bd9..e69de29 100644
--- a/diff.txt
+++ b/diff.txt
@@ -1,702 +0,0 @@
-diff --git a/diff.txt b/diff.txt
-index 3121e66..e69de29 100644
---- a/diff.txt
-+++ b/diff.txt
-@@ -1,314 +0,0 @@
--diff --git a/diff.txt b/diff.txt
--index b4b29d6..e69de29 100644
----- a/diff.txt
--+++ b/diff.txt
--@@ -1,15 +0,0 @@
---diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
---index dda3cb9..44937fd 100644
------ a/src/main/resources/application.yml
---+++ b/src/main/resources/application.yml
---@@ -1 +1,8 @@
----spring.application.name=product-catalog-api
---+spring:
---+  application:
---+    name: product-catalog-api
---+
---+  datasource:
---+    url: jdbc:mysql://localhost:3306/catalog
---+    username: ${DATABASE_USERNAME}
---+    password: ${DATABASE_PASSWORD}
---\ No newline at end of file
--diff --git a/pom.xml b/pom.xml
--index e3e33ea..404a86f 100644
----- a/pom.xml
--+++ b/pom.xml
--@@ -38,6 +38,14 @@
-- 			<groupId>org.springframework.boot</groupId>
-- 			<artifactId>spring-boot-starter-web</artifactId>
-- 		</dependency>
--+		<dependency>
--+			<groupId>org.flywaydb</groupId>
--+			<artifactId>flyway-core</artifactId>
--+		</dependency>
--+		<dependency>
--+			<groupId>org.flywaydb</groupId>
--+			<artifactId>flyway-mysql</artifactId>
--+		</dependency>
-- 
-- 		<dependency>
-- 			<groupId>com.mysql</groupId>
--diff --git a/src/main/java/com/example/product_catalog_api/model/Category.java b/src/main/java/com/example/product_catalog_api/model/Category.java
--index fb77faa..c905505 100644
----- a/src/main/java/com/example/product_catalog_api/model/Category.java
--+++ b/src/main/java/com/example/product_catalog_api/model/Category.java
--@@ -1,4 +1,65 @@
---package com.example.product_catalog_api.entity;
--+package com.example.product_catalog_api.model;
-- 
--+import jakarta.persistence.*;
--+import org.hibernate.annotations.CreationTimestamp;
--+import org.hibernate.annotations.UpdateTimestamp;
--+
--+import java.time.LocalDateTime;
--+import java.util.Objects;
--+
--+@Entity
--+@Table(name = "categories")
-- public class Category {
--+    @Id
--+    @GeneratedValue(strategy = GenerationType.IDENTITY)
--+    Long id;
--+
--+    @Column(unique = true, nullable = false)
--+    @Enumerated(EnumType.STRING)
--+    CategoryEnum name;
--+
--+    @CreationTimestamp
--+    LocalDateTime createdAt;
--+    @UpdateTimestamp
--+    LocalDateTime updatedAt;
--+
--+    public Category() {
--+    }
--+
--+    public Category(CategoryEnum name) {
--+        this.name = name;
--+    }
--+
--+    public CategoryEnum getName() {
--+        return name;
--+    }
--+
--+    public void setName(CategoryEnum name) {
--+        this.name = name;
--+    }
--+
--+    public Long getId() {
--+        return id;
--+    }
--+
--+    public LocalDateTime getCreatedAt() {
--+        return createdAt;
--+    }
--+
--+    public LocalDateTime getUpdatedAt() {
--+        return updatedAt;
--+    }
--+
--+    @Override
--+    public boolean equals(Object o) {
--+        if (o == null || getClass() != o.getClass()) return false;
--+
--+        Category category = (Category) o;
--+        return Objects.equals(id, category.id);
--+    }
--+
--+    @Override
--+    public int hashCode() {
--+        return Objects.hashCode(id);
--+    }
-- }
--diff --git a/src/main/java/com/example/product_catalog_api/model/CategoryEnum.java b/src/main/java/com/example/product_catalog_api/model/CategoryEnum.java
--index 3b72c4c..1585ad8 100644
----- a/src/main/java/com/example/product_catalog_api/model/CategoryEnum.java
--+++ b/src/main/java/com/example/product_catalog_api/model/CategoryEnum.java
--@@ -1,4 +1,10 @@
-- package com.example.product_catalog_api.model;
-- 
-- public enum CategoryEnum {
--+    FIQH,
--+    AQEEDAH,
--+    SEERAH,
--+    TAFSEER,
--+    QURAN,
--+    HADEETH
-- }
--diff --git a/src/main/java/com/example/product_catalog_api/model/Product.java b/src/main/java/com/example/product_catalog_api/model/Product.java
--index 9ea1ff1..6479b78 100644
----- a/src/main/java/com/example/product_catalog_api/model/Product.java
--+++ b/src/main/java/com/example/product_catalog_api/model/Product.java
--@@ -1,4 +1,4 @@
---package com.example.product_catalog_api.entity;
--+package com.example.product_catalog_api.model;
-- 
-- import jakarta.persistence.*;
-- import org.hibernate.annotations.CreationTimestamp;
--@@ -22,6 +22,10 @@ public class Product {
-- 
--     String description;
-- 
--+    @ManyToOne(fetch = FetchType.LAZY)
--+    @JoinColumn(name = "category_id")
--+    Category category;
--+
--     @CreationTimestamp
--     LocalDateTime createdAt;
--     @UpdateTimestamp
--@@ -83,4 +87,12 @@ public class Product {
--     public void setDescription(String description) {
--         this.description = description;
--     }
--+
--+    public Category getCategory() {
--+        return category;
--+    }
--+
--+    public void setCategory(Category category) {
--+        this.category = category;
--+    }
-- }
--diff --git a/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java b/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java
--index ca2a2d6..cd784e2 100644
----- a/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java
--+++ b/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java
--@@ -1,4 +1,9 @@
-- package com.example.product_catalog_api.repository;
-- 
---public class ProductRepository {
--+import com.example.product_catalog_api.model.Product;
--+import org.springframework.data.jpa.repository.JpaRepository;
--+import org.springframework.stereotype.Repository;
--+
--+@Repository
--+public interface ProductRepository extends JpaRepository<Product, Long> {
-- }
--diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
--index 44937fd..fd59bd7 100644
----- a/src/main/resources/application.yml
--+++ b/src/main/resources/application.yml
--@@ -5,4 +5,13 @@ spring:
--   datasource:
--     url: jdbc:mysql://localhost:3306/catalog
--     username: ${DATABASE_USERNAME}
---    password: ${DATABASE_PASSWORD}
--\ No newline at end of file
--+    password: ${DATABASE_PASSWORD}
--+    driver-class-name: com.mysql.cj.jdbc.Driver # Good practice to be explicit
--+
--+  jpa:
--+    hibernate:
--+      ddl-auto: validate
--+
--+  flyway:
--+    enabled: true
--+    locations: classpath:db/migration
--\ No newline at end of file
--diff --git a/src/main/resources/db/migration/V2__Insert_initial_products.sql b/src/main/resources/db/migration/V2__Insert_initial_products.sql
--index 6187f1f..aaeaee1 100644
----- a/src/main/resources/db/migration/V2__Insert_initial_products.sql
--+++ b/src/main/resources/db/migration/V2__Insert_initial_products.sql
--@@ -1,2 +1,4 @@
---ALTER TABLE products
---ADD COLUMN 
--\ No newline at end of file
--+INSERT INTO products(name, price) VALUES
--+    ("Belangrijke lessen voor de gehele gemeenschap", 7.5),
--+    ("Een blik op het karakter van de edele boodschapper", 5.66),
--+    ("Uitleg van de geloofsleer- Sharh as-soennah", 6.66);
--\ No newline at end of file
--diff --git a/src/main/resources/db/migration/V3__Make_product_name_unique.sql b/src/main/resources/db/migration/V3__Make_product_name_unique.sql
--index e69de29..442d097 100644
----- a/src/main/resources/db/migration/V3__Make_product_name_unique.sql
--+++ b/src/main/resources/db/migration/V3__Make_product_name_unique.sql
--@@ -0,0 +1,2 @@
--+ALTER TABLE products
--+    ADD UNIQUE (name);
--\ No newline at end of file
--diff --git a/src/main/resources/db/migration/V4__Add_description_to_products.sql b/src/main/resources/db/migration/V4__Add_description_to_products.sql
--index e69de29..777232e 100644
----- a/src/main/resources/db/migration/V4__Add_description_to_products.sql
--+++ b/src/main/resources/db/migration/V4__Add_description_to_products.sql
--@@ -0,0 +1,2 @@
--+ALTER TABLE products
--+    ADD COLUMN description TEXT;
--\ No newline at end of file
--diff --git a/src/main/resources/db/migration/V5__Add_description_to_initialized_products.sql b/src/main/resources/db/migration/V5__Add_description_to_initialized_products.sql
--index e69de29..89733bc 100644
----- a/src/main/resources/db/migration/V5__Add_description_to_initialized_products.sql
--+++ b/src/main/resources/db/migration/V5__Add_description_to_initialized_products.sql
--@@ -0,0 +1,36 @@
--+UPDATE products
--+SET description = ("Dit specifieke boek komt daarom niet in aanmerking voor betaling in termijnen.
--+
--+                    Je kunt het uiteraard wél toevoegen aan je bestelling samen met andere boeken die wél op afbetaling beschikbaar zijn.
--+
--+                    In dit boekje Belangrijke lessen voor de gehele gemeenschap van de voormalige moefti van Saoedi-Arabië, shaykh al islaam ‘Abdul-‘Aziez Ibn Baaz, leert de lezer op beknopte wijze de fundamenten van de religie. De Shaykh tracht op een simpele, begrijpelijke manier de verplichte kennis te verduidelijken betreffende onder andere:
--+
--+                    -de pilaren van islaam & imaan
--+                    -de vormen van Tawhied
--+                    -hoofdstukken uit de Qoraan
--+                    -de reiniging
--+                    -het gebed
--+                    -de islamitische karaktereigenschappen
--+                    -afgoderij en verschillende zonden
--+                    -de regelgevingen met betrekking tot de dodenwassing en het dodengebed")
--+WHERE id = 1;
--+UPDATE products
--+SET description = ("Elke moslim zal zeggen van de Profeet Mohammed (vrede en zegeningen zij met hem) te houden. Maar wie was hij? Waarom werd hij naar ons gezonden? Hoe was zijn karakter?
--+
--+                    De Profeet Mohammed (vrede en zegeningen zij met hem) werd als voorbeeld naar de mensheid gestuurd. Het eigen maken van zijn karakter moet ons streven zijn. Maar wat weet je eigenlijk van zijn karakter? Om je daarbij te helpen hebben wij van Ibn Baaz Bookstore het gerenommeerde boek ‘Een blik op het karakter van de edele Boodschapper’ van de prominente geleerde ‘Abdoel-Mohsin al-‘Abbaad naar helder Nederlands vertaald
--+
--+                    Op bovenstaande vragen en veel meer geeft shaykh ‘Abdoel-Mohsin al-‘Abbaad een antwoord in dit prachtige boek. Een must-have voor elke moslim, en een aanrader voor nieuwe moslims of mensen die geïnteresseerd zijn in de islaam.
--+
--+")
--+WHERE id = 2;
--+UPDATE products
--+SET description = ("De klassieker van een van de vroege hanbalie-geleerden, nu voor het eerst in het Nederlands verkrijgbaar.
--+
--+                    Ontdek een van de belangrijkste werken uit de islamitische geschiedenis omtrent de geloofsleer. Uitleg van de geloofsleer (Ar. Sharh as-soennah) legt het verschil tussen de zuivere soennah en innovaties in heldere taal uit, met veel voorbeelden die voor de hedendaagse lezer herkenbaar zullen zijn. Het toont aan dat de geloofsleer van de grote imaams van de vier wetscholen één was, en meningsverschillen alleen in fiqh-kwesties kunnen bestaan. Dit boek is een nekslag voor de mensen van innovaties en degenen die de zuivere geloofsleer willen vermengen met leringen die niet voortkomen uit de soennah van de Profeet (sallallaahoe alaihi wasallam).
--+
--+                    In dit boek zijn verschillende verhelderende voetnoten toegevoegd die ontleend zijn aan de uitleggen van grote geleerden zoals shaykh Saalih al-Fawzaan en shaykh Ahmed an-Nadjmie. Daarnaast zijn er voetnoten toegevoegd van shaykh Khaalid ar-Raddaadie, die de inhoud van het boek geverifieerd heeft.
--+
--+                    Over de auteur: Al-Barbahaarie (overl. 4de eeuw na hidjrah/10de eeuw n. Chr.) was een leerling van studenten van imaam Ahmed bin Hanbal, en hij behoort dan ook tot een van de belangrijkste hanbalie-geleerden. Hij leefde in dezelfde tijd als de grote imaams, van wie hij hun zuivere geloofsleer overnam. Hij stond bekend om het verdedigen van de geloofsleer van de selef, en het bestrijden van dwalende groeperingen middels correcte kennis. Waar hij kwam was hij populair onder het volk, en onder zijn leringen werden zonden en innovaties massaal bestreden.
--+
--+")
--+WHERE id = 3;
--diff --git a/src/main/resources/db/migration/V6__Create_category_table.sql b/src/main/resources/db/migration/V6__Create_category_table.sql
--index e69de29..86ba4df 100644
----- a/src/main/resources/db/migration/V6__Create_category_table.sql
--+++ b/src/main/resources/db/migration/V6__Create_category_table.sql
--@@ -0,0 +1,7 @@
--+CREATE TABLE categories (
--+    id BIGINT AUTO_INCREMENT PRIMARY KEY,
--+    name VARCHAR(255) UNIQUE NOT NULL,
--+
--+    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--+    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
--+);
--\ No newline at end of file
--diff --git a/src/main/resources/db/migration/V7__Insert_initial_categories.sql b/src/main/resources/db/migration/V7__Insert_initial_categories.sql
--index e69de29..f68911b 100644
----- a/src/main/resources/db/migration/V7__Insert_initial_categories.sql
--+++ b/src/main/resources/db/migration/V7__Insert_initial_categories.sql
--@@ -0,0 +1,7 @@
--+INSERT INTO categories(name) values
--+    ("FIQH"),
--+    ("AQEEDAH"),
--+    ("SEERAH"),
--+    ("TAFSEER"),
--+    ("QURAN"),
--+    ("HADEETH");
--diff --git a/src/main/resources/db/migration/V8__Add_category_fk_to_product_table.sql b/src/main/resources/db/migration/V8__Add_category_fk_to_product_table.sql
--index e69de29..f0bf47a 100644
----- a/src/main/resources/db/migration/V8__Add_category_fk_to_product_table.sql
--+++ b/src/main/resources/db/migration/V8__Add_category_fk_to_product_table.sql
--@@ -0,0 +1,2 @@
--+ALTER TABLE products
--+ADD COLUMN category_id BIGINT;
--\ No newline at end of file
--diff --git a/src/main/resources/db/migration/V9__Update_initialized_products_with_fk.sql b/src/main/resources/db/migration/V9__Update_initialized_products_with_fk.sql
--index e69de29..abc3e68 100644
----- a/src/main/resources/db/migration/V9__Update_initialized_products_with_fk.sql
--+++ b/src/main/resources/db/migration/V9__Update_initialized_products_with_fk.sql
--@@ -0,0 +1,11 @@
--+UPDATE products
--+SET category_id = (SELECT c.id from categories c where c.name = 'AQEEDAH')
--+where id = 1;
--+
--+UPDATE products
--+SET category_id = (SELECT c.id from categories c where c.name = 'AQEEDAH')
--+where id = 2;
--+
--+UPDATE products
--+SET category_id = (SELECT c.id from categories c where c.name = 'AQEEDAH')
--+where id = 3;
-diff --git a/pom.xml b/pom.xml
-index 404a86f..1ab1929 100644
---- a/pom.xml
-+++ b/pom.xml
-@@ -46,6 +46,11 @@
- 			<groupId>org.flywaydb</groupId>
- 			<artifactId>flyway-mysql</artifactId>
- 		</dependency>
-+		<dependency>
-+			<groupId>org.mapstruct</groupId>
-+			<artifactId>mapstruct</artifactId>
-+			<version>1.6.3</version>
-+		</dependency>
- 
- 		<dependency>
- 			<groupId>com.mysql</groupId>
-@@ -65,6 +70,20 @@
- 				<groupId>org.springframework.boot</groupId>
- 				<artifactId>spring-boot-maven-plugin</artifactId>
- 			</plugin>
-+
-+			<plugin>
-+				<groupId>org.apache.maven.plugins</groupId>
-+				<artifactId>maven-compiler-plugin</artifactId>
-+				<configuration>
-+					<annotationProcessorPaths>
-+						<path>
-+							<groupId>org.mapstruct</groupId>
-+							<artifactId>mapstruct-processor</artifactId>
-+							<version>1.6.3</version>
-+						</path>
-+					</annotationProcessorPaths>
-+				</configuration>
-+			</plugin>
- 		</plugins>
- 	</build>
- 
-diff --git a/src/main/java/com/example/product_catalog_api/DTO/request/CreateProductRequestDTO.java b/src/main/java/com/example/product_catalog_api/DTO/request/CreateProductRequestDTO.java
-index c94c9de..7746053 100644
---- a/src/main/java/com/example/product_catalog_api/DTO/request/CreateProductRequestDTO.java
-+++ b/src/main/java/com/example/product_catalog_api/DTO/request/CreateProductRequestDTO.java
-@@ -1,4 +1,4 @@
--package com.example.product_catalog_api.DTO;
-+package com.example.product_catalog_api.DTO.request;
- 
- import com.example.product_catalog_api.model.CategoryEnum;
- 
-diff --git a/src/main/java/com/example/product_catalog_api/DTO/response/CreateProductResponseDTO.java b/src/main/java/com/example/product_catalog_api/DTO/response/CreateProductResponseDTO.java
-index d40641b..d7ed5b2 100644
---- a/src/main/java/com/example/product_catalog_api/DTO/response/CreateProductResponseDTO.java
-+++ b/src/main/java/com/example/product_catalog_api/DTO/response/CreateProductResponseDTO.java
-@@ -1,4 +1,4 @@
--package com.example.product_catalog_api.DTO;
-+package com.example.product_catalog_api.DTO.response;
- 
- import com.example.product_catalog_api.model.CategoryEnum;
- 
-diff --git a/src/main/java/com/example/product_catalog_api/DTO/response/GetProductResponseDTO.java b/src/main/java/com/example/product_catalog_api/DTO/response/GetProductResponseDTO.java
-index f8e305a..3560d06 100644
---- a/src/main/java/com/example/product_catalog_api/DTO/response/GetProductResponseDTO.java
-+++ b/src/main/java/com/example/product_catalog_api/DTO/response/GetProductResponseDTO.java
-@@ -1,4 +1,4 @@
--package com.example.product_catalog_api.DTO;
-+package com.example.product_catalog_api.DTO.response;
- 
- import com.example.product_catalog_api.model.CategoryEnum;
- 
-diff --git a/src/main/java/com/example/product_catalog_api/DTO/response/GetProductsResponseDTO.java b/src/main/java/com/example/product_catalog_api/DTO/response/GetProductsResponseDTO.java
-index 85804fd..d361747 100644
---- a/src/main/java/com/example/product_catalog_api/DTO/response/GetProductsResponseDTO.java
-+++ b/src/main/java/com/example/product_catalog_api/DTO/response/GetProductsResponseDTO.java
-@@ -2,7 +2,7 @@ package com.example.product_catalog_api.DTO.response;
- 
- import java.util.List;
- 
--public record GetAllProductsResponseDTO (
-+public record GetProductsResponseDTO(
-         int count,
-         List<GetProductResponseDTO> products
- ){
-diff --git a/src/main/java/com/example/product_catalog_api/ErrorDetails.java b/src/main/java/com/example/product_catalog_api/ErrorDetails.java
-index 9be2027..04a30d3 100644
---- a/src/main/java/com/example/product_catalog_api/ErrorDetails.java
-+++ b/src/main/java/com/example/product_catalog_api/ErrorDetails.java
-@@ -1,4 +1,8 @@
- package com.example.product_catalog_api;
- 
--public record ErrorDetails() {
-+public record ErrorDetails(
-+        int statucode,
-+        String message,
-+        String details
-+) {
- }
-diff --git a/src/main/java/com/example/product_catalog_api/GlobalExceptionHandler.java b/src/main/java/com/example/product_catalog_api/GlobalExceptionHandler.java
-index 5f411f3..fe0c37d 100644
---- a/src/main/java/com/example/product_catalog_api/GlobalExceptionHandler.java
-+++ b/src/main/java/com/example/product_catalog_api/GlobalExceptionHandler.java
-@@ -1,4 +1,17 @@
- package com.example.product_catalog_api;
- 
--public class ControllerAdvice {
-+import com.example.product_catalog_api.exception.CantFindCategoryException;
-+import org.springframework.http.HttpStatus;
-+import org.springframework.http.ResponseEntity;
-+import org.springframework.web.bind.annotation.ControllerAdvice;
-+import org.springframework.web.bind.annotation.ExceptionHandler;
-+import org.springframework.web.context.request.WebRequest;
-+
-+@ControllerAdvice
-+public class GlobalExceptionHandler {
-+    @ExceptionHandler(CantFindCategoryException.class)
-+    ResponseEntity<ErrorDetails> handleCantFindCategoryException(CantFindCategoryException ex, WebRequest request) {
-+        ErrorDetails err = new ErrorDetails(HttpStatus.NOT_FOUND.value(), ex.getMessage(), request.getDescription(false));
-+        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(err);
-+    }
- }
-diff --git a/src/main/java/com/example/product_catalog_api/controller/ProductController.java b/src/main/java/com/example/product_catalog_api/controller/ProductController.java
-index 41b0fe9..7059eb7 100644
---- a/src/main/java/com/example/product_catalog_api/controller/ProductController.java
-+++ b/src/main/java/com/example/product_catalog_api/controller/ProductController.java
-@@ -1,4 +1,58 @@
- package com.example.product_catalog_api.controller;
- 
-+import com.example.product_catalog_api.DTO.request.CreateProductRequestDTO;
-+import com.example.product_catalog_api.DTO.response.CreateProductResponseDTO;
-+import com.example.product_catalog_api.DTO.response.GetProductsResponseDTO;
-+import com.example.product_catalog_api.exception.CantFindProductException;
-+import com.example.product_catalog_api.service.ProductService;
-+import org.springframework.http.ResponseEntity;
-+import org.springframework.web.bind.annotation.*;
-+
-+import java.net.URI;
-+
-+@RestController
-+@RequestMapping("product")
- public class ProductController {
-+    private final ProductService productService;
-+
-+    public ProductController(ProductService productService) {
-+        this.productService = productService;
-+    }
-+
-+    @GetMapping
-+    ResponseEntity<?> getAllProducts(
-+            @RequestParam(name = "id", required = false) Long id,
-+            @RequestParam(name = "name", required = false) String name
-+    ) {
-+        Object result = null;
-+
-+        if (id != null) {
-+            result = productService.getProduct(id);
-+        } else if (name != null) {
-+            result = productService.getProduct(name);
-+        } else {
-+            result = productService.getAllProducts();
-+        }
-+
-+        return ResponseEntity.ok(result);
-+    }
-+
-+//    @GetMapping("/id/{id}")
-+//    ResponseEntity<GetProductResponseDTO> getProduct(@PathVariable Long id) {
-+//        GetProductResponseDTO getProductResponseDTO = productService.getProduct(id);
-+//        return ResponseEntity.ok(getProductResponseDTO);
-+//    }
-+//
-+//    @GetMapping("/name/{name}")
-+//    ResponseEntity<GetProductResponseDTO> getProduct(@PathVariable String name) {
-+//        GetProductResponseDTO getProductResponseDTO = productService.getProduct(name);
-+//        return ResponseEntity.ok(getProductResponseDTO);
-+//    }
-+
-+    @PostMapping
-+    ResponseEntity<CreateProductResponseDTO> createProduct(@RequestBody CreateProductRequestDTO body) {
-+        CreateProductResponseDTO createProductResponseDTO = productService.createProduct(body.name(), body.price(), body.category(), body.description());
-+        URI location = URI.create("product/" + createProductResponseDTO.id());
-+        return ResponseEntity.created(location).body(createProductResponseDTO);
-+    }
- }
-diff --git a/src/main/java/com/example/product_catalog_api/exception/CantFindCategoryException.java b/src/main/java/com/example/product_catalog_api/exception/CantFindCategoryException.java
-index 0e99e7d..d8f1fb2 100644
---- a/src/main/java/com/example/product_catalog_api/exception/CantFindCategoryException.java
-+++ b/src/main/java/com/example/product_catalog_api/exception/CantFindCategoryException.java
-@@ -1,4 +1,21 @@
- package com.example.product_catalog_api.exception;
- 
--public class CantFindCategoryException {
-+
-+import com.example.product_catalog_api.model.Category;
-+import com.example.product_catalog_api.model.CategoryEnum;
-+
-+public class CantFindCategoryException extends RuntimeException{
-+    public CantFindCategoryException(String message) {
-+        super(message);
-+    }
-+
-+    public static CantFindCategoryException create(CategoryEnum c) {
-+        String message = "Cannot find category with name: " + c.name();
-+        return new CantFindCategoryException(message);
-+    }
-+
-+    public static CantFindCategoryException create(Category c) {
-+        String message = "Cannot find category with name: " + c.getName();
-+        return new CantFindCategoryException(message);
-+    }
- }
-diff --git a/src/main/java/com/example/product_catalog_api/exception/CantFindProductException.java b/src/main/java/com/example/product_catalog_api/exception/CantFindProductException.java
-index f38bac0..65289a6 100644
---- a/src/main/java/com/example/product_catalog_api/exception/CantFindProductException.java
-+++ b/src/main/java/com/example/product_catalog_api/exception/CantFindProductException.java
-@@ -3,19 +3,20 @@ package com.example.product_catalog_api.exception;
- 
- import com.example.product_catalog_api.model.Category;
- import com.example.product_catalog_api.model.CategoryEnum;
-+import com.example.product_catalog_api.model.Product;
- 
- public class CantFindProductException extends RuntimeException{
-     public CantFindProductException(String message) {
-         super(message);
-     }
- 
--    public static CantFindProductException create(CategoryEnum c) {
--        String message = "Cannot find category with name: " + c.name();
-+    public static CantFindProductException create(Long id) {
-+        String message = "Cannot find product with id: " + id;
-         return new CantFindProductException(message);
-     }
- 
--    public static CantFindProductException create(Category c) {
--        String message = "Cannot find category with name: " + c.getName();
-+    public static CantFindProductException create(String name) {
-+        String message = "Cannot find product with name: " + name;
-         return new CantFindProductException(message);
-     }
- }
-diff --git a/src/main/java/com/example/product_catalog_api/mapper/ProductMapper.java b/src/main/java/com/example/product_catalog_api/mapper/ProductMapper.java
-index 50414f0..4fc2bde 100644
---- a/src/main/java/com/example/product_catalog_api/mapper/ProductMapper.java
-+++ b/src/main/java/com/example/product_catalog_api/mapper/ProductMapper.java
-@@ -1,4 +1,23 @@
- package com.example.product_catalog_api.mapper;
- 
-+import com.example.product_catalog_api.DTO.request.CreateProductRequestDTO;
-+import com.example.product_catalog_api.DTO.response.CreateProductResponseDTO;
-+import com.example.product_catalog_api.DTO.response.GetProductResponseDTO;
-+import com.example.product_catalog_api.model.Product;
-+import org.mapstruct.Mapper;
-+import org.mapstruct.Mapping;
-+import org.mapstruct.factory.Mappers;
-+
-+@Mapper(componentModel = "spring")
- public interface ProductMapper {
-+
-+    ProductMapper INSTANCE = Mappers.getMapper(ProductMapper.class);
-+
-+    Product createProductRequestDTOtoProduct(CreateProductRequestDTO createProductRequestDTO);
-+
-+    @Mapping(source = "category.name", target = "category")
-+    CreateProductResponseDTO productToCreateProductResponseDTO(Product p);
-+
-+    @Mapping(source = "category.name", target = "category")
-+    GetProductResponseDTO productToGetProductResponseDTO(Product p);
- }
-diff --git a/src/main/java/com/example/product_catalog_api/model/Product.java b/src/main/java/com/example/product_catalog_api/model/Product.java
-index 6479b78..0844269 100644
---- a/src/main/java/com/example/product_catalog_api/model/Product.java
-+++ b/src/main/java/com/example/product_catalog_api/model/Product.java
-@@ -34,9 +34,11 @@ public class Product {
-     public Product() {
-     }
- 
--    public Product(BigDecimal price, String name) {
--        this.price = price;
-+    public Product(String name, BigDecimal price, Category category, String description) {
-         this.name = name;
-+        this.price = price;
-+        this.category = category;
-+        this.description = description;
-     }
- 
-     public String getName() {
-diff --git a/src/main/java/com/example/product_catalog_api/repository/CategoryRepository.java b/src/main/java/com/example/product_catalog_api/repository/CategoryRepository.java
-index c37b39e..c5f3574 100644
---- a/src/main/java/com/example/product_catalog_api/repository/CategoryRepository.java
-+++ b/src/main/java/com/example/product_catalog_api/repository/CategoryRepository.java
-@@ -1,4 +1,13 @@
- package com.example.product_catalog_api.repository;
- 
--public interface CategoryRepository {
-+import com.example.product_catalog_api.model.Category;
-+import com.example.product_catalog_api.model.CategoryEnum;
-+import org.springframework.data.jpa.repository.JpaRepository;
-+import org.springframework.stereotype.Repository;
-+
-+import java.util.Optional;
-+
-+@Repository
-+public interface CategoryRepository extends JpaRepository<Category, Long> {
-+    Optional<Category> findByName(CategoryEnum name);
- }
-diff --git a/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java b/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java
-index cd784e2..da7b312 100644
---- a/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java
-+++ b/src/main/java/com/example/product_catalog_api/repository/ProductRepository.java
-@@ -4,6 +4,9 @@ import com.example.product_catalog_api.model.Product;
- import org.springframework.data.jpa.repository.JpaRepository;
- import org.springframework.stereotype.Repository;
- 
-+import java.util.Optional;
-+
- @Repository
- public interface ProductRepository extends JpaRepository<Product, Long> {
-+    Optional<Product> findByName(String name);
- }
-diff --git a/src/main/java/com/example/product_catalog_api/service/ProductService.java b/src/main/java/com/example/product_catalog_api/service/ProductService.java
-index 701d362..59c9233 100644
---- a/src/main/java/com/example/product_catalog_api/service/ProductService.java
-+++ b/src/main/java/com/example/product_catalog_api/service/ProductService.java
-@@ -1,7 +1,62 @@
--package com.example.product_catalog_api;
-+package com.example.product_catalog_api.service;
- 
-+import com.example.product_catalog_api.DTO.response.CreateProductResponseDTO;
-+import com.example.product_catalog_api.DTO.response.GetProductsResponseDTO;
-+import com.example.product_catalog_api.DTO.response.GetProductResponseDTO;
-+import com.example.product_catalog_api.exception.CantFindCategoryException;
-+import com.example.product_catalog_api.exception.CantFindProductException;
-+import com.example.product_catalog_api.mapper.ProductMapper;
-+import com.example.product_catalog_api.model.Category;
-+import com.example.product_catalog_api.model.CategoryEnum;
-+import com.example.product_catalog_api.model.Product;
-+import com.example.product_catalog_api.repository.CategoryRepository;
-+import com.example.product_catalog_api.repository.ProductRepository;
- import org.springframework.stereotype.Service;
-+import org.springframework.transaction.annotation.Transactional;
-+
-+import java.math.BigDecimal;
-+import java.util.List;
- 
- @Service
-+@Transactional
- public class ProductService {
-+    private final ProductRepository productRepository;
-+    private final CategoryRepository categoryRepository;
-+    private final ProductMapper productMapper;
-+
-+    public ProductService(ProductRepository productRepository, CategoryRepository categoryRepository, ProductMapper productMapper) {
-+        this.productRepository = productRepository;
-+        this.categoryRepository = categoryRepository;
-+        this.productMapper = productMapper;
-+    }
-+
-+    public GetProductsResponseDTO getAllProducts(){
-+        List<Product> products = productRepository.findAll();
-+        List<GetProductResponseDTO> responses = products.stream().map(productMapper::productToGetProductResponseDTO).toList();
-+        return new GetProductsResponseDTO(responses.size(), responses);
-+    }
-+
-+    public GetProductResponseDTO getProduct(Long id) {
-+        Product p = productRepository.findById(id)
-+                .orElseThrow(() -> CantFindProductException.create(id));
-+        return productMapper.productToGetProductResponseDTO(p);
-+    }
-+
-+    public GetProductResponseDTO getProduct(String name) {
-+        Product p = productRepository.findByName(name)
-+                .orElseThrow(() -> CantFindProductException.create(name));
-+        return productMapper.productToGetProductResponseDTO(p);
-+    }
-+
-+    public CreateProductResponseDTO createProduct(String name, BigDecimal price, CategoryEnum category, String description) {
-+        Category c = categoryRepository.findByName(category)
-+                .orElseThrow(() -> CantFindCategoryException.create(category));
-+        Product p = new Product(name, price, c, description);
-+        Product savedProduct = productRepository.save(p);
-+        return productMapper.productToCreateProductResponseDTO(savedProduct);
-+    }
-+
-+
-+
-+
- }
diff --git a/src/main/java/com/example/product_catalog_api/DTO/request/UpdateProductRequestDTO.java b/src/main/java/com/example/product_catalog_api/DTO/request/UpdateProductRequestDTO.java
new file mode 100644
index 0000000..4ffd985
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/DTO/request/UpdateProductRequestDTO.java
@@ -0,0 +1,11 @@
+package com.example.product_catalog_api.DTO.request;
+
+import com.fasterxml.jackson.annotation.JsonInclude;
+
+import java.math.BigDecimal;
+
+public record UpdateProductRequestDTO(
+        BigDecimal price,
+        String description
+) {
+}
diff --git a/src/main/java/com/example/product_catalog_api/DTO/response/DeleteProductResponseDTO.java b/src/main/java/com/example/product_catalog_api/DTO/response/DeleteProductResponseDTO.java
new file mode 100644
index 0000000..b69179f
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/DTO/response/DeleteProductResponseDTO.java
@@ -0,0 +1,7 @@
+package com.example.product_catalog_api.DTO.response;
+
+public record DeleteProductResponseDTO(
+        Long id,
+        String name
+) {
+}
diff --git a/src/main/java/com/example/product_catalog_api/DTO/response/UpdateProductResponseDTO.java b/src/main/java/com/example/product_catalog_api/DTO/response/UpdateProductResponseDTO.java
new file mode 100644
index 0000000..0a58c19
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/DTO/response/UpdateProductResponseDTO.java
@@ -0,0 +1,7 @@
+package com.example.product_catalog_api.DTO.response;
+
+public record UpdateProductResponseDTO(
+        Long id,
+        String name
+) {
+}
diff --git a/src/main/java/com/example/product_catalog_api/GlobalExceptionHandler.java b/src/main/java/com/example/product_catalog_api/GlobalExceptionHandler.java
new file mode 100644
index 0000000..3b9e9bd
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/GlobalExceptionHandler.java
@@ -0,0 +1,35 @@
+package com.example.product_catalog_api;
+
+import com.example.product_catalog_api.exception.AllFieldsAreNullException;
+import com.example.product_catalog_api.exception.CantFindCategoryException;
+import com.example.product_catalog_api.exception.CantFindProductException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.ControllerAdvice;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.context.request.WebRequest;
+
+@ControllerAdvice
+public class GlobalExceptionHandler {
+    private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);
+
+    @ExceptionHandler(CantFindCategoryException.class)
+    ResponseEntity<ErrorDetails> handleCantFindCategoryException(CantFindCategoryException ex, WebRequest request) {
+        ErrorDetails err = new ErrorDetails(HttpStatus.NOT_FOUND.value(), ex.getMessage(), request.getDescription(false));
+        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(err);
+    }
+
+    @ExceptionHandler(CantFindProductException.class)
+    ResponseEntity<ErrorDetails> handleCantFindProductException(CantFindProductException ex, WebRequest request) {
+        ErrorDetails err = new ErrorDetails(HttpStatus.NOT_FOUND.value(), ex.getMessage(), request.getDescription(false));
+        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(err);
+    }
+
+    @ExceptionHandler(AllFieldsAreNullException.class)
+    ResponseEntity<ErrorDetails> handleAllFieldsAreNullException(AllFieldsAreNullException ex, WebRequest request) {
+        ErrorDetails err = new ErrorDetails(HttpStatus.NOT_FOUND.value(), ex.getMessage(), request.getDescription(false));
+        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(err);
+    }
+}
diff --git a/src/main/java/com/example/product_catalog_api/controller/ProductController.java b/src/main/java/com/example/product_catalog_api/controller/ProductController.java
new file mode 100644
index 0000000..ba74d12
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/controller/ProductController.java
@@ -0,0 +1,70 @@
+package com.example.product_catalog_api.controller;
+
+import com.example.product_catalog_api.DTO.request.CreateProductRequestDTO;
+import com.example.product_catalog_api.DTO.request.UpdateProductRequestDTO;
+import com.example.product_catalog_api.DTO.response.CreateProductResponseDTO;
+import com.example.product_catalog_api.DTO.response.DeleteProductResponseDTO;
+import com.example.product_catalog_api.DTO.response.GetProductResponseDTO;
+import com.example.product_catalog_api.DTO.response.UpdateProductResponseDTO;
+import com.example.product_catalog_api.exception.AllFieldsAreNullException;
+import com.example.product_catalog_api.service.ProductService;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.net.URI;
+
+@RestController
+@RequestMapping("product")
+public class ProductController {
+    private final ProductService productService;
+
+    public ProductController(ProductService productService) {
+        this.productService = productService;
+    }
+
+    @GetMapping
+    ResponseEntity<?> getAllProducts(
+            @RequestParam(name = "id", required = false) Long id,
+            @RequestParam(name = "name", required = false) String name
+    ) {
+        Object result = null;
+
+        if (id != null) {
+            result = productService.getProduct(id);
+        } else if (name != null && !name.isBlank()) {
+            result = productService.getProduct(name);
+        } else {
+            result = productService.getAllProducts();
+        }
+
+        return ResponseEntity.ok(result);
+    }
+
+    @GetMapping("/{id}")
+    ResponseEntity<GetProductResponseDTO> getProduct(@PathVariable Long id) {
+        GetProductResponseDTO getProductResponseDTO = productService.getProduct(id);
+        return ResponseEntity.ok(getProductResponseDTO);
+    }
+
+    @PostMapping
+    ResponseEntity<CreateProductResponseDTO> createProduct(@RequestBody CreateProductRequestDTO body) {
+        CreateProductResponseDTO createProductResponseDTO = productService.createProduct(body.name(), body.price(), body.category(), body.description());
+        URI location = URI.create("product/" + createProductResponseDTO.id());
+        return ResponseEntity.created(location).body(createProductResponseDTO);
+    }
+
+    @PatchMapping("/{id}")
+    ResponseEntity<UpdateProductResponseDTO> updateProduct(@PathVariable Long id, @RequestBody UpdateProductRequestDTO body) {
+        if (body.price() == null && body.description() == null)
+            throw new AllFieldsAreNullException("Both price and description are null!");
+
+        UpdateProductResponseDTO updateProductResponseDTO = productService.updateProduct(id, body.price(), body.description());
+        return ResponseEntity.ok(updateProductResponseDTO);
+    }
+
+    @DeleteMapping("/{id}")
+    ResponseEntity<DeleteProductResponseDTO> deleteProduct(@PathVariable Long id) {
+        DeleteProductResponseDTO deleteProductResponseDTO = productService.deleteProduct(id);
+        return ResponseEntity.noContent().build();
+    }
+}
diff --git a/src/main/java/com/example/product_catalog_api/exception/AllFieldsAreNullException.java b/src/main/java/com/example/product_catalog_api/exception/AllFieldsAreNullException.java
new file mode 100644
index 0000000..977c546
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/exception/AllFieldsAreNullException.java
@@ -0,0 +1,7 @@
+package com.example.product_catalog_api.exception;
+
+public class AllFieldsAreNullException extends RuntimeException {
+    public AllFieldsAreNullException(String message) {
+        super(message);
+    }
+}
diff --git a/src/main/java/com/example/product_catalog_api/mapper/ProductMapper.java b/src/main/java/com/example/product_catalog_api/mapper/ProductMapper.java
new file mode 100644
index 0000000..61c4829
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/mapper/ProductMapper.java
@@ -0,0 +1,28 @@
+package com.example.product_catalog_api.mapper;
+
+import com.example.product_catalog_api.DTO.request.CreateProductRequestDTO;
+import com.example.product_catalog_api.DTO.response.CreateProductResponseDTO;
+import com.example.product_catalog_api.DTO.response.DeleteProductResponseDTO;
+import com.example.product_catalog_api.DTO.response.GetProductResponseDTO;
+import com.example.product_catalog_api.DTO.response.UpdateProductResponseDTO;
+import com.example.product_catalog_api.model.Product;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.mapstruct.factory.Mappers;
+
+@Mapper(componentModel = "spring")
+public interface ProductMapper {
+
+    ProductMapper INSTANCE = Mappers.getMapper(ProductMapper.class);
+
+    Product createProductRequestDTOtoProduct(CreateProductRequestDTO createProductRequestDTO);
+
+    @Mapping(source = "category.name", target = "category")
+    CreateProductResponseDTO productToCreateProductResponseDTO(Product p);
+
+    @Mapping(source = "category.name", target = "category")
+    GetProductResponseDTO productToGetProductResponseDTO(Product p);
+
+    UpdateProductResponseDTO productToUpdateProductResponseDTO(Product p);
+    DeleteProductResponseDTO productToDeleteProductResponseDTO(Product p);
+}
diff --git a/src/main/java/com/example/product_catalog_api/service/ProductService.java b/src/main/java/com/example/product_catalog_api/service/ProductService.java
new file mode 100644
index 0000000..d7727a0
--- /dev/null
+++ b/src/main/java/com/example/product_catalog_api/service/ProductService.java
@@ -0,0 +1,80 @@
+package com.example.product_catalog_api.service;
+
+import com.example.product_catalog_api.DTO.response.*;
+import com.example.product_catalog_api.exception.CantFindCategoryException;
+import com.example.product_catalog_api.exception.CantFindProductException;
+import com.example.product_catalog_api.mapper.ProductMapper;
+import com.example.product_catalog_api.model.Category;
+import com.example.product_catalog_api.model.CategoryEnum;
+import com.example.product_catalog_api.model.Product;
+import com.example.product_catalog_api.repository.CategoryRepository;
+import com.example.product_catalog_api.repository.ProductRepository;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+@Service
+@Transactional
+public class ProductService {
+    private final ProductRepository productRepository;
+    private final CategoryRepository categoryRepository;
+    private final ProductMapper productMapper;
+
+    public ProductService(ProductRepository productRepository, CategoryRepository categoryRepository, ProductMapper productMapper) {
+        this.productRepository = productRepository;
+        this.categoryRepository = categoryRepository;
+        this.productMapper = productMapper;
+    }
+
+    @Transactional(readOnly = true)
+    public GetProductsResponseDTO getAllProducts(){
+        List<Product> products = productRepository.findAll();
+        List<GetProductResponseDTO> responses = products.stream().map(productMapper::productToGetProductResponseDTO).toList();
+        return new GetProductsResponseDTO(responses.size(), responses);
+    }
+
+    @Transactional(readOnly = true)
+    public GetProductResponseDTO getProduct(Long id) {
+        Product p = productRepository.findById(id)
+                .orElseThrow(() -> CantFindProductException.create(id));
+        return productMapper.productToGetProductResponseDTO(p);
+    }
+
+    @Transactional(readOnly = true)
+    public GetProductResponseDTO getProduct(String name) {
+        Product p = productRepository.findByName(name)
+                .orElseThrow(() -> CantFindProductException.create(name));
+        return productMapper.productToGetProductResponseDTO(p);
+    }
+
+    public CreateProductResponseDTO createProduct(String name, BigDecimal price, CategoryEnum category, String description) {
+        Category c = categoryRepository.findByName(category)
+                .orElseThrow(() -> CantFindCategoryException.create(category));
+        Product p = new Product(name, price, c, description);
+        Product savedProduct = productRepository.save(p);
+        return productMapper.productToCreateProductResponseDTO(savedProduct);
+    }
+
+    public UpdateProductResponseDTO updateProduct(Long id, BigDecimal price, String description){
+        Product p = productRepository.findById(id)
+                .orElseThrow(() -> CantFindProductException.create(id));
+
+        if (price != null)
+            p.setPrice(price);
+
+        if (description != null)
+            p.setDescription(description);
+
+        return productMapper.productToUpdateProductResponseDTO(p);
+    }
+
+    public DeleteProductResponseDTO deleteProduct(Long id) {
+        Product p = productRepository.findById(id)
+                .orElseThrow(() -> CantFindProductException.create(id));
+
+        productRepository.delete(p);
+        return productMapper.productToDeleteProductResponseDTO(p);
+    }
+}
